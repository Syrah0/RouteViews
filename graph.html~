<!DOCTYPE html>
<meta charset="utf-8">
<style>
    body {font-family: "Inconsolata";}
</style>
<svg width="960" height="600"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>
<link href="https://fonts.googleapis.com/css?family=Inconsolata" rel="stylesheet">
<script>
var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");
var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
    .force("charge", d3.forceManyBody())//.strength(-200))
//		.force('charge', d3.forceManyBody()
//      .strength(-200)
//      .theta(0.8)
//      .distanceMax(150)
//    )
// 		.force('collide', d3.forceCollide()
//       .radius(d => 40)
//       .iterations(2)
//     )
//    .force("center", d3.forceCenter(width / 2, height / 2))
    .force("r", d3.forceRadial(function(d) { return d.type === "a" ? 100 : 200; }));

/*const graph = {
  "nodes": [
    {"id": "1"},
    {"id": "2"},
    {"id": "4"},
    {"id": "8"},
    {"id": "16"},
    {"id": "11"},
    {"id": "12"},
    {"id": "14"},
    {"id": "18"},
    {"id": "116"}
  ],
  "links": [
    {"source": "1", "target": "2"},
    {"source": "2", "target": "4"},
    {"source": "4", "target": "4"},
    {"source": "4", "target": "8"},
    {"source": "4", "target": "8"},
    {"source": "4", "target": "8"},
    {"source": "8", "target": "16"},
    {"source": "16", "target": "1"}
  ]
}
*/
  
function run(graph) {
  
  graph.links.forEach(function(d){
//     d.source = d.source_id;    
//     d.target = d.target_id;
  });           
  var link = svg.append("g")
                .style("stroke", "#aaa")
                .selectAll("line")
                .data(graph.links)
                .enter().append("line");
  var node = svg.append("g")
            .attr("class", "nodes")
            .selectAll("circle")
            .data(graph.nodes)
            .enter().append("circle")
            .attr("r", 2)
            .call(d3.drag()
              .on("start", dragstarted)
              .on("drag", dragged)
              .on("end", dragended));
  
  var label = svg.append("g")
      .attr("class", "labels")
      .selectAll("text")
      .data(graph.nodes)
      .enter().append("text")
        .attr("class", "label")
        .text(function(d) { return d.id; });
  simulation
      .nodes(graph.nodes)
      .on("tick", ticked);
  simulation.force("link")
      .links(graph.links);
  function ticked() {
    link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });
    node
         .attr("r", 2)
         .style("fill", "#efefef")
         .style("stroke", "#424242")
         .style("stroke-width", "1px")
         .attr("cx", function (d) { return d.x; })
         .attr("cy", function(d) { return d.y; });
    
    label
    		.attr("x", function(d) { return d.x; })
            .attr("y", function (d) { return d.y - 22; })
            .style("font-size", "10px").style("fill", "#333");
  }
}
function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart()
  d.fx = d.x
  d.fy = d.y
//  simulation.fix(d);
}
function dragged(d) {
  d.fx = d3.event.x
  d.fy = d3.event.y
//  simulation.fix(d, d3.event.x, d3.event.y);
}
function dragended(d) {
  d.fx = d3.event.x
  d.fy = d3.event.y
  if (!d3.event.active) simulation.alphaTarget(0);
  //simulation.unfix(d);
}

d3.json("Graph2.json",function(error,graph) {
    run(graph)
})
</script>